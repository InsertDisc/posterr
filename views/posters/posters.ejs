<div id="myCarousel" data-interval="<%=globals.slideDuration%>" data-pause="false" class="carousel slide <%=globals.fadeTransition%> h-100 w-100"
     data-ride="carousel">
    <div class="carousel-inner cardHolder h-100 w-100 ">
    </div>
</div>

<script language='javascript'>
  var initialLoadTime = new Date().getTime();
  var connCheckClock;
  var connOk = true;

  function noConnection() {
    cardHtml = `<div class="container d-flex align-items-center justify-content-center no-content"><div class="d-flex">
      <div class="settingsLink">Lost connectivity with Posterr server!</br>Attempting to restore connection..</div></div></div>`
    $(".cardHolder").html(cardHtml);    
    
  }

  function connCheck(){
//console.log('check for connection');
    const xhr = new XMLHttpRequest();
    xhr.open('GET', window.location.href + 'conncheck');
    // set response format
    xhr.responseType = 'json';
    xhr.send();
    // connection failed
    xhr.onerror = () => {
      console.log('Conection failed. Trying to restore connection.')
      connOk = false;
      noConnection();
    }

    xhr.onload = () => {
      // check that there hasn't been rapid a cold restart of posterr that this connection check missed
      const res = xhr.response;
      let serverDate = new Date(res.status);
      let clientDate = new Date();
      let dif = clientDate.getTime() - serverDate.getTime();

      let secsDiff = dif / 1000;
      let Seconds_Between_Dates = Math.abs(secsDiff);
      //console.log('difference:',Seconds_Between_Dates);

      // if a restart happened between the connection checks, then restart
      // this is only checked for if there are already slides configured, so should not happen for initial setup
      if(Seconds_Between_Dates<3){
        console.log('unscheduled rapid restart of server. Client refreshing');
        location.reload();
      }

      // restore connection
      if(connOk==false){
        console.log('Connection restored!');
        connOk=true;
        location.reload();
      }
      // connection ok!
      else{
        //console.log('connection ok');
      }
    }
  }

  // call posterr api to get currently generated card sets
  function getCards(){
    const xhr = new XMLHttpRequest();
    xhr.open('GET', window.location.href + 'getcards');

    // set response format
    xhr.responseType = 'json';
    xhr.send();

    xhr.onload = () => {
      // get JSON response
      const posterr = xhr.response;
      if(!posterr == null || posterr.cards.length !== 0) {
        let cardHtml = "";
        posterr.cards.forEach(card => {
          cardHtml += card.rendered;
        });

        $(".cardHolder").html(cardHtml);
        initialLoad();
      }
    }
  }

  // apply styles to cards and manage audio
  function initialLoad() {
    // make banner link to settings
    $(".bannerBigText").click(function() {
      window.location = "/settings"; 
      return false;
    });

    //resize for initial page load
    $('.myDiv').css({'height': (($(window).height())) + 'px' });
    StopAllAudio();
    //trigger initial audio play if present
    if (document.getElementById("audio1")) {
      var x = document.getElementById("audio1");
      x.play().catch(e => {
        // ignore promise errors when paused during play
        //console.warn(e);
      });
    }

    Resize(1);
  }

  $(function () {
    // initial load of cards and connection check timer every 5 seconds
    setInterval(connCheck,5000);
    getCards();
  });

  async function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // generic sleep function
  async function waitforload(delay, id) {
    await sleep(delay);

    // resize banner and progress bar based upon poster size
    Resize(id);
  }

  // Calculate width and placement of progress bar
  function Resize(id) {
    // assign vars and get middle panel dimensions
    var midHeight = window.innerHeight * .84;
    var midWidth = window.innerWidth;
    var posterHeight;
    var posterWidth;
    var ar = parseFloat($('#poster' + id + 'AR').text());
    var progressOffset;

    // Calculate poster width for progress indicator and top offset position
    switch (ar) {
      case 1: // album art
        if(midWidth >= midHeight){
          posterHeight = midHeight;
          posterWidth = midHeight;
          progressOffset = 0;
        }
        else {
          posterHeight = midWidth;
          posterWidth = midWidth;
          progressOffset = (midHeight - posterHeight) / 2;
        }
        break;
      case 1.47: // Most movie / tv posters
        posterHeight = midHeight;
        posterWidth = midHeight / ar;
        progressOffset = 0;
        break;
      default: // default to less used movie/tv poster size (often 1.5, but 1.47 still ok to use)
        posterHeight = midHeight;
        posterWidth = midHeight / ar;
        progressOffset = 0;
        break;
    }

    if (posterWidth > 0) {
      if ($('#progress' + id).hasClass('hidden')) {
      } else {
        $('#progress' + id).css({
          'width': posterWidth + 'px',
          'position': 'relative',
          'top': progressOffset + 'px'
        });
      }
    }
  }

  // resize when window resizes
  $(window).bind('resize', function () {
    if(window.innerHeight <= 650) {
      $('.banners').css({
        'background-color': 'red'
      })
    }
    else {
      $('.banners').css({
        'background-color': '#18180d'
      })
      location.reload();
    }
  });

  // pause carouselwhilst any videos are playing
  // [TODO!!! - ]
  $('#myCarousel').on('slid.bs.carousel', function (ev) {
    StopAllAudio();
    var id = ev.relatedTarget.id;
    if(id==1) getCards();

    //console.log('sliding to item:', id); // do something...
    if (document.getElementById("audio" + id)) {
      var x = document.getElementById("audio" + id);
      x.play().catch(e => {
        // ignore promise errors when paused during play
      });
    }

    // resize everything after move to new slide
    waitforload(0, id);

    /*         if (substr(id, 3).toLower() == 'vid') {
              console.log('pausing carousel and starting video');
              setTimeout(function () {
                $('#myCarousel').carousel('pause');
              }, 1)
              player.playVideo();
            } */
  });

  function StopAllAudio() {
    $('audio').each(function () {
      try {
        this.pause(); // Stop playing
        this.currentTime = 0; // Reset time
      } catch (err) {
        //console.warn(err);
      }
    });
  }

  //  });
</script>
